services:
  # Stock Publisher (Producer)
  stock-publisher:
    build: ./stock-publisher
    container_name: stock_publisher
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    restart: on-failure
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy


  # RabbitMQ (Message Broker)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: guest #stockmarket
      RABBITMQ_DEFAULT_PASS: guest #supersecret123
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5


  # Konsumenten
  consumer-aapl:
    build: ./consumer
    container_name: consumer_aapl
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      QUEUE_NAME: AAPL
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/stockmarket?replicaSet=rs0
    restart: on-failure
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_started
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started

  consumer-msft:
    build: ./consumer
    container_name: consumer_msft
    environment:
#      RABBITMQ_URL: amqp://rabbitmq:supersecret123@rabbitmq:5672
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      QUEUE_NAME: MSFT
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/stockmarket?replicaSet=rs0
    restart: on-failure
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_started
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started

  consumer-tsla:
    build: ./consumer
    container_name: consumer_tsla
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      QUEUE_NAME: TSLA
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/stockmarket?replicaSet=rs0
    restart: on-failure
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_started
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started



  # MongoDB Cluster
  mongo1:
    image: mongo:7.0
    container_name: mongo1
    ports:
      - "27017:27017"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"] 
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"   
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 0s
    networks:
      - backend
 
  mongo2:
    image: mongo:7.0
    container_name: mongo2
    ports:
      - "27018:27018"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"   
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"
    networks:
      - backend
 
  mongo3:
    image: mongo:7.0
    container_name: mongo3
    ports:
      - "27019:27019"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"   
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
    networks:
      - backend

  #Frontend-Konfiguration
  frontend1:
    build: ./stock-liveview
    container_name: frontend1
    restart: always
    ports:
      - "3000:3000"
    environment:
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/stockmarket?replicaSet=rs0
    networks:
      - frontend
      - backend
    depends_on:
      - mongo1
      - mongo2
      - mongo3

  frontend2:
    build: ./stock-liveview
    container_name: frontend2
    restart: always
    ports:
      - "3001:3000"
    environment:
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/stockmarket?replicaSet=rs0
    networks:
      - frontend
      - backend
    depends_on:
      - mongo1
      - mongo2
      - mongo3


  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend
    depends_on:
      - frontend1
      - frontend2

volumes:
  mongo1_data:
  mongo1_config:  
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config:

networks:
  backend:
  frontend: